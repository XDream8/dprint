{"version":3,"file":"b2b180bd7afac0560aba.worker.js","mappings":"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","sources":["formatter.worker.ts","../node_modules/@dprint/formatter/esm/mod.js"],"sourcesContent":["/// <reference lib=\"webworker\" />\nimport { createFromBuffer, Formatter } from \"@dprint/formatter\";\n\nlet formatter: Promise<Formatter> | undefined;\nlet config: Record<string, unknown> | undefined;\nlet nextFormat: { filePath: string; fileText: string } | undefined;\nlet abortController = new AbortController();\n\nonmessage = function(e) {\n  switch (e.data.type) {\n    case \"LoadUrl\": {\n      loadUrl(e.data.url);\n      break;\n    }\n    case \"SetConfig\": {\n      setConfig(e.data.config);\n      break;\n    }\n    case \"Format\": {\n      format(e.data.filePath, e.data.fileText);\n      break;\n    }\n  }\n};\n\nfunction loadUrl(url: string) {\n  abortController.abort();\n  abortController = new AbortController();\n  const signal = abortController.signal;\n  formatter = fetch(url, { signal })\n    .then(response => response.arrayBuffer())\n    .then(wasmModuleBuffer => {\n      const newFormatter = createFromBuffer(wasmModuleBuffer);\n\n      postPluginInfo(newFormatter);\n\n      if (config) {\n        setConfigSync(newFormatter, config);\n      }\n\n      if (nextFormat) {\n        formatSync(newFormatter, nextFormat.filePath, nextFormat.fileText);\n      }\n\n      return newFormatter;\n    });\n\n  formatter.catch((err: any) => {\n    if (!signal.aborted) {\n      postError(err);\n    }\n  });\n}\n\nfunction setConfig(providedConfig: Record<string, unknown>) {\n  config = providedConfig;\n  refresh();\n}\n\nfunction refresh() {\n  if (formatter) {\n    formatter.then(f => {\n      if (config) {\n        setConfigSync(f, config);\n      }\n      if (nextFormat) {\n        formatSync(f, nextFormat.filePath, nextFormat.fileText);\n      }\n    });\n  }\n}\n\nfunction format(filePath: string, fileText: string) {\n  nextFormat = { filePath, fileText };\n\n  if (formatter) {\n    formatter.then(f => formatSync(f, filePath, fileText));\n  }\n}\n\nfunction setConfigSync(f: Formatter, config: Record<string, unknown>) {\n  doHandlingError(() => f.setConfig({}, config));\n}\n\nfunction formatSync(f: Formatter, filePath: string, fileText: string) {\n  let result;\n  try {\n    result = f.formatText(filePath, fileText);\n  } catch (err: any) {\n    result = err.message;\n  }\n  postMessage({\n    type: \"Format\",\n    text: result,\n  });\n}\n\nfunction postPluginInfo(f: Formatter) {\n  postMessage({\n    type: \"PluginInfo\",\n    info: f.getPluginInfo(),\n  });\n}\n\nfunction doHandlingError(action: () => void) {\n  try {\n    action();\n  } catch (err: any) {\n    postError(err);\n  }\n}\n\nfunction postError(err: Error) {\n  postMessage({\n    type: \"Error\",\n    message: err.message,\n  });\n}\n","/**\n * Creates the WebAssembly import object, if necessary.\n */\nexport function createImportObject() {\n    // for now, use an identity object\n    return {\n        dprint: {\n            \"host_clear_bytes\": () => { },\n            \"host_read_buffer\": () => { },\n            \"host_write_buffer\": () => { },\n            \"host_take_file_path\": () => { },\n            \"host_take_override_config\": () => { },\n            \"host_format\": () => 0,\n            \"host_get_formatted_text\": () => 0,\n            \"host_get_error_text\": () => 0, // zero length\n        },\n    };\n}\n/**\n * Creates a formatter from the specified streaming source.\n * @remarks This is the most efficient way to create a formatter.\n * @param response - The streaming source to create the formatter from.\n */\nexport function createStreaming(response) {\n    if (typeof WebAssembly.instantiateStreaming === \"function\") {\n        return WebAssembly\n            // deno-lint-ignore no-explicit-any\n            .instantiateStreaming(response, createImportObject())\n            .then((obj) => createFromInstance(obj.instance));\n    }\n    else {\n        // fallback for node.js\n        return getArrayBuffer()\n            .then((buffer) => createFromBuffer(buffer));\n    }\n    function getArrayBuffer() {\n        if (isResponse(response)) {\n            return response.arrayBuffer();\n        }\n        else {\n            return response.then((response) => response.arrayBuffer());\n        }\n        function isResponse(response) {\n            return response.arrayBuffer != null;\n        }\n    }\n}\n/**\n * Creates a formatter from the specified wasm module bytes.\n * @param wasmModuleBuffer - The buffer of the wasm module.\n */\nexport function createFromBuffer(wasmModuleBuffer) {\n    const wasmModule = new WebAssembly.Module(wasmModuleBuffer);\n    const wasmInstance = new WebAssembly.Instance(wasmModule, createImportObject());\n    return createFromInstance(wasmInstance);\n}\n/**\n * Creates a formatter from the specified wasm instance.\n * @param wasmInstance - The WebAssembly instance.\n */\nexport function createFromInstance(wasmInstance) {\n    // deno-lint-ignore no-explicit-any\n    const wasmExports = wasmInstance.exports;\n    const { \n    // deno-lint-ignore camelcase\n    get_plugin_schema_version, \n    // deno-lint-ignore camelcase\n    set_file_path, \n    // deno-lint-ignore camelcase\n    set_override_config, \n    // deno-lint-ignore camelcase\n    get_formatted_text, format, \n    // deno-lint-ignore camelcase\n    get_error_text, \n    // deno-lint-ignore camelcase\n    get_plugin_info, \n    // deno-lint-ignore camelcase\n    get_resolved_config, \n    // deno-lint-ignore camelcase\n    get_config_diagnostics, \n    // deno-lint-ignore camelcase\n    set_global_config, \n    // deno-lint-ignore camelcase\n    set_plugin_config, \n    // deno-lint-ignore camelcase\n    get_license_text, \n    // deno-lint-ignore camelcase\n    get_wasm_memory_buffer, \n    // deno-lint-ignore camelcase\n    get_wasm_memory_buffer_size, \n    // deno-lint-ignore camelcase\n    add_to_shared_bytes_from_buffer, \n    // deno-lint-ignore camelcase\n    set_buffer_with_shared_bytes, \n    // deno-lint-ignore camelcase\n    clear_shared_bytes, \n    // deno-lint-ignore camelcase\n    reset_config, } = wasmExports;\n    const pluginSchemaVersion = get_plugin_schema_version();\n    const expectedPluginSchemaVersion = 3;\n    if (pluginSchemaVersion !== 2\n        && pluginSchemaVersion !== expectedPluginSchemaVersion) {\n        throw new Error(`Not compatible plugin. `\n            + `Expected schema ${expectedPluginSchemaVersion}, `\n            + `but plugin had ${pluginSchemaVersion}.`);\n    }\n    const bufferSize = get_wasm_memory_buffer_size();\n    let configSet = false;\n    return {\n        setConfig(globalConfig, pluginConfig) {\n            setConfig(globalConfig, pluginConfig);\n        },\n        getConfigDiagnostics() {\n            setConfigIfNotSet();\n            const length = get_config_diagnostics();\n            return JSON.parse(receiveString(length));\n        },\n        getResolvedConfig() {\n            setConfigIfNotSet();\n            const length = get_resolved_config();\n            return JSON.parse(receiveString(length));\n        },\n        getPluginInfo() {\n            const length = get_plugin_info();\n            const pluginInfo = JSON.parse(receiveString(length));\n            pluginInfo.fileNames = pluginInfo.fileNames ?? [];\n            return pluginInfo;\n        },\n        getLicenseText() {\n            const length = get_license_text();\n            return receiveString(length);\n        },\n        formatText(filePath, fileText, overrideConfig) {\n            setConfigIfNotSet();\n            if (overrideConfig != null) {\n                if (pluginSchemaVersion === 2) {\n                    throw new Error(\"Cannot set the override configuration for this old plugin.\");\n                }\n                sendString(JSON.stringify(overrideConfig));\n                set_override_config();\n            }\n            sendString(filePath);\n            set_file_path();\n            sendString(fileText);\n            const responseCode = format();\n            switch (responseCode) {\n                case 0: // no change\n                    return fileText;\n                case 1: // change\n                    return receiveString(get_formatted_text());\n                case 2: // error\n                    throw new Error(receiveString(get_error_text()));\n                default:\n                    throw new Error(`Unexpected response code: ${responseCode}`);\n            }\n        },\n    };\n    function setConfigIfNotSet() {\n        if (!configSet) {\n            setConfig({}, {});\n        }\n    }\n    function setConfig(globalConfig, pluginConfig) {\n        if (reset_config != null) {\n            reset_config();\n        }\n        sendString(JSON.stringify(globalConfig));\n        set_global_config();\n        sendString(JSON.stringify(pluginConfig));\n        set_plugin_config();\n        configSet = true;\n    }\n    function sendString(text) {\n        const encoder = new TextEncoder();\n        const encodedText = encoder.encode(text);\n        const length = encodedText.length;\n        clear_shared_bytes(length);\n        let index = 0;\n        while (index < length) {\n            const writeCount = Math.min(length - index, bufferSize);\n            const wasmBuffer = getWasmBuffer(writeCount);\n            for (let i = 0; i < writeCount; i++) {\n                wasmBuffer[i] = encodedText[index + i];\n            }\n            add_to_shared_bytes_from_buffer(writeCount);\n            index += writeCount;\n        }\n    }\n    function receiveString(length) {\n        const buffer = new Uint8Array(length);\n        let index = 0;\n        while (index < length) {\n            const readCount = Math.min(length - index, bufferSize);\n            set_buffer_with_shared_bytes(index, readCount);\n            const wasmBuffer = getWasmBuffer(readCount);\n            for (let i = 0; i < readCount; i++) {\n                buffer[index + i] = wasmBuffer[i];\n            }\n            index += readCount;\n        }\n        const decoder = new TextDecoder();\n        return decoder.decode(buffer);\n    }\n    function getWasmBuffer(length) {\n        const pointer = get_wasm_memory_buffer();\n        return new Uint8Array(\n        // deno-lint-ignore no-explicit-any\n        wasmInstance.exports.memory.buffer, pointer, length);\n    }\n}\n"],"names":["formatter","config","nextFormat","createFromBuffer","wasmModuleBuffer","wasmModule","WebAssembly","Module","createFromInstance","Instance","dprint","wasmInstance","wasmExports","exports","get_plugin_schema_version","set_file_path","set_override_config","get_formatted_text","format","get_error_text","get_plugin_info","get_resolved_config","get_config_diagnostics","set_global_config","set_plugin_config","get_license_text","get_wasm_memory_buffer","get_wasm_memory_buffer_size","add_to_shared_bytes_from_buffer","set_buffer_with_shared_bytes","clear_shared_bytes","reset_config","pluginSchemaVersion","Error","bufferSize","configSet","setConfig","globalConfig","pluginConfig","getConfigDiagnostics","setConfigIfNotSet","length","JSON","parse","receiveString","getResolvedConfig","getPluginInfo","pluginInfo","fileNames","getLicenseText","formatText","filePath","fileText","overrideConfig","sendString","stringify","responseCode","text","encodedText","TextEncoder","encode","index","writeCount","Math","min","wasmBuffer","getWasmBuffer","i","buffer","Uint8Array","readCount","TextDecoder","decode","pointer","memory","abortController","AbortController","setConfigSync","f","action","err","postError","doHandlingError","formatSync","result","message","postMessage","type","onmessage","e","data","url","abort","signal","fetch","then","response","arrayBuffer","newFormatter","info","catch","aborted","loadUrl","providedConfig"],"sourceRoot":""}